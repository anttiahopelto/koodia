package kuntosali.test;
// Generated by ComTest BEGIN
import kuntosali.*;
import java.util.*;
import static org.junit.Assert.*;
import org.junit.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2020.07.30 15:23:31 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class AsiakkaatTest {



  // Generated by ComTest BEGIN
  /** 
   * testKorvaaTaiLisaa171 
   * @throws SailoException when error
   * @throws CloneNotSupportedException when error
   */
  @Test
  public void testKorvaaTaiLisaa171() throws SailoException,CloneNotSupportedException {    // Asiakkaat: 171
    Asiakkaat asiakkaat = new Asiakkaat(); 
    Asiakas aku1 = new Asiakas(), aku2 = new Asiakas(); 
    aku1.rekisteroi(); aku2.rekisteroi(); 
    assertEquals("From: Asiakkaat line: 177", 0, asiakkaat.getLkm()); 
    asiakkaat.korvaaTaiLisaa(aku1); assertEquals("From: Asiakkaat line: 178", 1, asiakkaat.getLkm()); 
    asiakkaat.korvaaTaiLisaa(aku2); assertEquals("From: Asiakkaat line: 179", 2, asiakkaat.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testPoista201 
   * @throws SailoException when error
   */
  @Test
  public void testPoista201() throws SailoException {    // Asiakkaat: 201
    Asiakkaat jasenet = new Asiakkaat(); 
    Asiakas aku1 = new Asiakas(), aku2 = new Asiakas(), aku3 = new Asiakas(); 
    aku1.rekisteroi(); aku2.rekisteroi(); aku3.rekisteroi(); 
    int id1 = aku1.getTunnusNro(); 
    jasenet.lisaa(aku1); jasenet.lisaa(aku2); jasenet.lisaa(aku3); 
    assertEquals("From: Asiakkaat line: 208", 1, jasenet.poista(id1+1)); 
    assertEquals("From: Asiakkaat line: 209", null, jasenet.annaId(id1+1)); assertEquals("From: Asiakkaat line: 209", 2, jasenet.getLkm()); 
    assertEquals("From: Asiakkaat line: 210", 1, jasenet.poista(id1)); assertEquals("From: Asiakkaat line: 210", 1, jasenet.getLkm()); 
    assertEquals("From: Asiakkaat line: 211", 0, jasenet.poista(id1+3)); assertEquals("From: Asiakkaat line: 211", 1, jasenet.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testEtsiId230 
   * @throws SailoException when error
   */
  @Test
  public void testEtsiId230() throws SailoException {    // Asiakkaat: 230
    Asiakkaat jasenet = new Asiakkaat(); 
    Asiakas aku1 = new Asiakas(), aku2 = new Asiakas(), aku3 = new Asiakas(); 
    aku1.rekisteroi(); aku2.rekisteroi(); aku3.rekisteroi(); 
    int id1 = aku1.getTunnusNro(); 
    jasenet.lisaa(aku1); jasenet.lisaa(aku2); jasenet.lisaa(aku3); 
    assertEquals("From: Asiakkaat line: 237", 1, jasenet.etsiId(id1+1)); 
    assertEquals("From: Asiakkaat line: 238", 2, jasenet.etsiId(id1+2)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testAsiakkaatIterator278 
   * @throws SailoException when error
   */
  @Test
  public void testAsiakkaatIterator278() throws SailoException {    // Asiakkaat: 278
    Asiakkaat jasenet = new Asiakkaat(); 
    Asiakas aku1 = new Asiakas(), aku2 = new Asiakas(); 
    aku1.rekisteroi(); aku2.rekisteroi(); 
    jasenet.lisaa(aku1); 
    jasenet.lisaa(aku2); 
    jasenet.lisaa(aku1); 
    StringBuffer ids = new StringBuffer(30); 
    for (Asiakas jasen:jasenet) // Kokeillaan for-silmukan toimintaa
    ids.append(" "+jasen.getTunnusNro()); 
    String tulos = " " + aku1.getTunnusNro() + " " + aku2.getTunnusNro() + " " + aku1.getTunnusNro(); 
    assertEquals("From: Asiakkaat line: 297", tulos, ids.toString()); 
    ids = new StringBuffer(30); 
    for (Iterator<Asiakas>  i=jasenet.iterator(); i.hasNext(); ) { // ja iteraattorin toimintaa
    Asiakas jasen = i.next(); 
    ids.append(" "+jasen.getTunnusNro()); 
    }
    assertEquals("From: Asiakkaat line: 305", tulos, ids.toString()); 
    Iterator<Asiakas>  i=jasenet.iterator(); 
    assertEquals("From: Asiakkaat line: 308", true, i.next() == aku1); 
    assertEquals("From: Asiakkaat line: 309", true, i.next() == aku2); 
    assertEquals("From: Asiakkaat line: 310", true, i.next() == aku1); 
    try {
    i.next(); 
    fail("Asiakkaat: 312 Did not throw NoSuchElementException");
    } catch(NoSuchElementException _e_){ _e_.getMessage(); }
  } // Generated by ComTest END
}