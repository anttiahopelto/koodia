package kuntosali.test;
// Generated by ComTest BEGIN
import java.io.File;
import kuntosali.*;
import java.util.*;
import static org.junit.Assert.*;
import org.junit.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2020.08.03 14:53:44 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class AsiakkaatTest {



  // Generated by ComTest BEGIN
  /** 
   * testLueTiedostosta74 
   * @throws SailoException when error
   */
  @Test
  public void testLueTiedostosta74() throws SailoException {    // Asiakkaat: 74
    Asiakkaat jasenet = new Asiakkaat(); 
    Asiakas aku1 = new Asiakas(), aku2 = new Asiakas(),aku3 = new Asiakas(); 
    aku1.taytaAsiakas(); 
    aku2.taytaAsiakas(); 
    aku3.taytaAsiakas(); 
    jasenet.lueTiedostosta("kuntosali/testi.dat"); 
    jasenet.lisaa(aku1); 
    jasenet.lisaa(aku2); 
    jasenet.lisaa(aku3); 
    jasenet.tallenna("kuntosali/testi.dat"); 
    Iterator<Asiakas> i = jasenet.iterator(); 
    assertEquals("From: Asiakkaat line: 89", true, i.hasNext()); 
    assertEquals("From: Asiakkaat line: 90", aku2, i.next()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testTallenna128 
   * @throws SailoException when error
   */
  @Test
  public void testTallenna128() throws SailoException {    // Asiakkaat: 128
    Asiakkaat asiakkaat = new Asiakkaat(); 
    Asiakas pitsi21 = new Asiakas(); pitsi21.taytaAsiakas(); 
    Asiakas pitsi11 = new Asiakas(); pitsi11.taytaAsiakas(); 
    Asiakas pitsi22 = new Asiakas(); pitsi22.taytaAsiakas(); 
    Asiakas pitsi12 = new Asiakas(); pitsi12.taytaAsiakas(); 
    Asiakas pitsi23 = new Asiakas(); pitsi23.taytaAsiakas(); 
    String tiedNimi = "testi.dat"; 
    File ftied = new File(tiedNimi); 
    ftied.delete(); 
    try {
    asiakkaat.lueTiedostosta(tiedNimi); 
    fail("Asiakkaat: 141 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    asiakkaat.lisaa(pitsi21); 
    asiakkaat.lisaa(pitsi11); 
    asiakkaat.lisaa(pitsi22); 
    asiakkaat.lisaa(pitsi12); 
    asiakkaat.lisaa(pitsi23); 
    asiakkaat.tallenna(tiedNimi); 
    asiakkaat = new Asiakkaat(); 
    asiakkaat.lueTiedostosta(tiedNimi); 
    Iterator<Asiakas> i = asiakkaat.iterator(); 
    assertEquals("From: Asiakkaat line: 151", pitsi21.toString(), i.next().toString()); 
    assertEquals("From: Asiakkaat line: 152", pitsi11.toString(), i.next().toString()); 
    assertEquals("From: Asiakkaat line: 153", pitsi22.toString(), i.next().toString()); 
    assertEquals("From: Asiakkaat line: 154", pitsi12.toString(), i.next().toString()); 
    assertEquals("From: Asiakkaat line: 155", pitsi23.toString(), i.next().toString()); 
    assertEquals("From: Asiakkaat line: 156", false, i.hasNext()); 
    asiakkaat.lisaa(pitsi23); 
    asiakkaat.tallenna(tiedNimi); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testKorvaaTaiLisaa234 
   * @throws SailoException when error
   * @throws CloneNotSupportedException when error
   */
  @Test
  public void testKorvaaTaiLisaa234() throws SailoException,CloneNotSupportedException {    // Asiakkaat: 234
    Asiakkaat asiakkaat = new Asiakkaat(); 
    Asiakas aku1 = new Asiakas(), aku2 = new Asiakas(); 
    aku1.rekisteroi(); aku2.rekisteroi(); 
    assertEquals("From: Asiakkaat line: 240", 0, asiakkaat.getLkm()); 
    asiakkaat.korvaaTaiLisaa(aku1); assertEquals("From: Asiakkaat line: 241", 1, asiakkaat.getLkm()); 
    asiakkaat.korvaaTaiLisaa(aku2); assertEquals("From: Asiakkaat line: 242", 2, asiakkaat.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testPoista264 
   * @throws SailoException when error
   */
  @Test
  public void testPoista264() throws SailoException {    // Asiakkaat: 264
    Asiakkaat jasenet = new Asiakkaat(); 
    Asiakas aku1 = new Asiakas(), aku2 = new Asiakas(), aku3 = new Asiakas(); 
    aku1.rekisteroi(); aku2.rekisteroi(); aku3.rekisteroi(); 
    int id1 = aku1.getTunnusNro(); 
    jasenet.lisaa(aku1); jasenet.lisaa(aku2); jasenet.lisaa(aku3); 
    assertEquals("From: Asiakkaat line: 271", 1, jasenet.poista(id1+1)); 
    assertEquals("From: Asiakkaat line: 272", null, jasenet.annaId(id1+1)); assertEquals("From: Asiakkaat line: 272", 2, jasenet.getLkm()); 
    assertEquals("From: Asiakkaat line: 273", 1, jasenet.poista(id1)); assertEquals("From: Asiakkaat line: 273", 1, jasenet.getLkm()); 
    assertEquals("From: Asiakkaat line: 274", 0, jasenet.poista(id1+3)); assertEquals("From: Asiakkaat line: 274", 1, jasenet.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testEtsiId295 
   * @throws SailoException when error
   */
  @Test
  public void testEtsiId295() throws SailoException {    // Asiakkaat: 295
    Asiakkaat jasenet = new Asiakkaat(); 
    Asiakas aku1 = new Asiakas(), aku2 = new Asiakas(), aku3 = new Asiakas(); 
    aku1.rekisteroi(); aku2.rekisteroi(); aku3.rekisteroi(); 
    int id1 = aku1.getTunnusNro(); 
    jasenet.lisaa(aku1); jasenet.lisaa(aku2); jasenet.lisaa(aku3); 
    assertEquals("From: Asiakkaat line: 302", 1, jasenet.etsiId(id1+1)); 
    assertEquals("From: Asiakkaat line: 303", 2, jasenet.etsiId(id1+2)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testAnnaId318 
   * @throws SailoException when error
   */
  @Test
  public void testAnnaId318() throws SailoException {    // Asiakkaat: 318
    Asiakkaat jasenet = new Asiakkaat(); 
    Asiakas aku1 = new Asiakas(), aku2 = new Asiakas(), aku3 = new Asiakas(); 
    aku1.rekisteroi(); aku2.rekisteroi(); aku3.rekisteroi(); 
    int id1 = aku1.getTunnusNro(); 
    jasenet.lisaa(aku1); jasenet.lisaa(aku2); jasenet.lisaa(aku3); 
    assertEquals("From: Asiakkaat line: 325", true, jasenet.annaId(id1  ) == aku1); 
    assertEquals("From: Asiakkaat line: 326", true, jasenet.annaId(id1+1) == aku2); 
    assertEquals("From: Asiakkaat line: 327", true, jasenet.annaId(id1+2) == aku3); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testEtsi344 
   * @throws SailoException when error
   */
  @Test
  public void testEtsi344() throws SailoException {    // Asiakkaat: 344
    Asiakkaat jasenet = new Asiakkaat(); 
    Asiakas aku1 = new Asiakas(), aku2 = new Asiakas(), aku3 = new Asiakas(); 
    aku1.rekisteroi(); aku2.rekisteroi(); aku3.rekisteroi(); 
    int id1 = aku1.getTunnusNro(); 
    jasenet.lisaa(aku1); jasenet.lisaa(aku2); jasenet.lisaa(aku3); 
    assertEquals("From: Asiakkaat line: 351", 1, jasenet.poista(id1+1)); 
    assertEquals("From: Asiakkaat line: 352", null, jasenet.annaId(id1+1)); assertEquals("From: Asiakkaat line: 352", 2, jasenet.getLkm()); 
    assertEquals("From: Asiakkaat line: 353", 1, jasenet.poista(id1)); assertEquals("From: Asiakkaat line: 353", 1, jasenet.getLkm()); 
    assertEquals("From: Asiakkaat line: 354", 0, jasenet.poista(id1+3)); assertEquals("From: Asiakkaat line: 354", 1, jasenet.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testAsiakkaatIterator384 
   * @throws SailoException when error
   */
  @Test
  public void testAsiakkaatIterator384() throws SailoException {    // Asiakkaat: 384
    Asiakkaat jasenet = new Asiakkaat(); 
    Asiakas aku1 = new Asiakas(), aku2 = new Asiakas(); 
    aku1.rekisteroi(); aku2.rekisteroi(); 
    jasenet.lisaa(aku1); 
    jasenet.lisaa(aku2); 
    jasenet.lisaa(aku1); 
    StringBuffer ids = new StringBuffer(30); 
    for (Asiakas jasen:jasenet) // Kokeillaan for-silmukan toimintaa
    ids.append(" "+jasen.getTunnusNro()); 
    String tulos = " " + aku1.getTunnusNro() + " " + aku2.getTunnusNro() + " " + aku1.getTunnusNro(); 
    assertEquals("From: Asiakkaat line: 403", tulos, ids.toString()); 
    ids = new StringBuffer(30); 
    for (Iterator<Asiakas>  i=jasenet.iterator(); i.hasNext(); ) { // ja iteraattorin toimintaa
    Asiakas jasen = i.next(); 
    ids.append(" "+jasen.getTunnusNro()); 
    }
    assertEquals("From: Asiakkaat line: 411", tulos, ids.toString()); 
    Iterator<Asiakas>  i=jasenet.iterator(); 
    assertEquals("From: Asiakkaat line: 414", true, i.next() == aku1); 
    assertEquals("From: Asiakkaat line: 415", true, i.next() == aku2); 
    assertEquals("From: Asiakkaat line: 416", true, i.next() == aku1); 
    try {
    i.next(); 
    fail("Asiakkaat: 418 Did not throw NoSuchElementException");
    } catch(NoSuchElementException _e_){ _e_.getMessage(); }
  } // Generated by ComTest END
}